/*******************************************************************************
 * Copyright (c) 2011 University of Southampton.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package ac.soton.eventb.emf.core.extension.navigator.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.navigator.ICommonContentExtensionSite;
import org.eclipse.ui.navigator.ICommonContentProvider;
import org.eventb.core.IContextRoot;
import org.eventb.core.IEventBRoot;
import org.eventb.core.IMachineRoot;
import org.eventb.emf.core.EventBElement;

import ac.soton.eventb.emf.core.extension.navigator.ExtensionNavigatorPlugin;

/**
 * Event-B EMF extension content provider for the IEventBRoot elements.
 * Provides the content of AbstractExtensions of a root element.
 * A slightly modified copy of the content providers generated by GMF for diagram elements.
 * 
 * cfs 04/01/12 : removed use of an editing domain since this is not an editor and yet refresh
 * 				 (reload of model) was sometimes causing exceptions due to the editing domain objecting
 * 				 to changing the model without a transactional command. A simple resource set is
 * 					sufficient here.
 * 
 * 
 * @author vitaly
 *
 */
public class ExtensionContentProvider implements ICommonContentProvider {

	protected AdapterFactoryContentProvider myAdapterFctoryContentProvier;

	protected static final Object[] EMPTY_ARRAY = new Object[0];

	private Viewer myViewer;
	
	protected ResourceSet rSet;

	private Runnable myViewerRefreshRunnable;

	/**
	 * Constructor
	 */
	public ExtensionContentProvider() {
		myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(
				ExtensionNavigatorPlugin.getDefault()
						.getItemProvidersAdapterFactory());
		rSet = new ResourceSetImpl();
		myViewerRefreshRunnable = new Runnable() {
			public void run() {
				if (myViewer != null) {
					myViewer.refresh();
				}
			}
		};
	}

	@Override
	public Object[] getElements(Object inputElement) {
		return getChildren(inputElement);
	}

	@Override
	public Object[] getChildren(Object parentElement) {
		if (parentElement instanceof IMachineRoot || parentElement instanceof IContextRoot) {
			IEventBRoot root = (IEventBRoot) parentElement;
			URI fileURI = URI.createPlatformResourceURI(root.getResource().getFullPath().toString(), true);
			Resource resource = rSet.getResource(fileURI, true);
			if (resource.isLoaded() && resource.getContents().isEmpty() == false) {
				EventBElement element = (EventBElement) resource.getContents().get(0);
				return wrapEObjects(
						element.getExtensions().toArray(),
						parentElement);
			}
		}
		
		if (parentElement instanceof ExtensionNavigatorItem) {
			return wrapEObjects(
					myAdapterFctoryContentProvier.getChildren(((ExtensionNavigatorItem) parentElement).getEObject())
					, parentElement);
		}
		return EMPTY_ARRAY;
	}


	public Object[] wrapEObjects(Object[] objects, Object parentElement) {
		Collection<ExtensionNavigatorItem> result = new ArrayList<ExtensionNavigatorItem>();
		for (int i = 0; i < objects.length; i++) {
			if (objects[i] instanceof EObject) {
				result.add(new ExtensionNavigatorItem(
						(EObject) objects[i], parentElement,
						myAdapterFctoryContentProvier));
			}
		}
		return result.toArray();
	}

	@Override
	public Object getParent(Object element) {
		if (element instanceof ExtensionNavigatorItem) {
			ExtensionNavigatorItem navigatorItem = (ExtensionNavigatorItem) element;
			return navigatorItem.getParent();
		}
		return null;
	}

	@Override
	public boolean hasChildren(Object element) {
		return getChildren(element).length > 0;
	}

	@Override
	public void dispose() {
		myViewerRefreshRunnable = null;
		myViewer = null;
		unloadAllResources();
	}

	void unloadAllResources() {
		for (Resource nextResource : rSet
				.getResources()) {
			nextResource.unload();
		}
	}

	void asyncRefresh() {
		if (myViewer != null && !myViewer.getControl().isDisposed()) {
			myViewer.getControl().getDisplay()
					.asyncExec(myViewerRefreshRunnable);
		}
	}

	@Override
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		myViewer = viewer;
	}

	@Override
	public void restoreState(IMemento aMemento) {
		/* not implemented */
	}

	@Override
	public void saveState(IMemento aMemento) {
		/* not implemented */
	}

	@Override
	public void init(ICommonContentExtensionSite aConfig) {
		/* not implemented */
	}

}
